service: () -> {
    createChallenge: (text, text, nat64, nat64) -> (variant {Ok:principal; Err:variant {InsufficientToken:principal; UserNotCreator:principal; UserAlreadyExist:principal; ChallengeNotFinished:principal; AlreadyParticipated:principal; CreatorNotEnoughBalance:principal; ChallengeFinished:principal; ResponseDoesNotExist:int8; UserNotParticipant:principal; InvalidUser:principal; UserDoesNotExist:principal; ChallengeDoesNotExist:principal; ConnectionError:principal}});
    createUser: (text) -> (variant {Ok:principal; Err:variant {InsufficientToken:principal; UserNotCreator:principal; UserAlreadyExist:principal; ChallengeNotFinished:principal; AlreadyParticipated:principal; CreatorNotEnoughBalance:principal; ChallengeFinished:principal; ResponseDoesNotExist:int8; UserNotParticipant:principal; InvalidUser:principal; UserDoesNotExist:principal; ChallengeDoesNotExist:principal; ConnectionError:principal}});
    deleteUser: (principal) -> (variant {Ok:record {id:principal; username:text; publishChallengeIds:vec principal; participateChallengeIds:vec principal; rewardedChallengeIds:vec principal; createdAt:nat64}; Err:variant {InsufficientToken:principal; UserNotCreator:principal; UserAlreadyExist:principal; ChallengeNotFinished:principal; AlreadyParticipated:principal; CreatorNotEnoughBalance:principal; ChallengeFinished:principal; ResponseDoesNotExist:int8; UserNotParticipant:principal; InvalidUser:principal; UserDoesNotExist:principal; ChallengeDoesNotExist:principal; ConnectionError:principal}});
    getChallenges: () -> (vec record {id:principal; reward:nat64; title:text; creator:principal; responses:vec record {id:int8; title:text; contents:text; chosen:bool; responderId:principal}; createdAt:nat64; completed:vec record {id:principal; username:text; publishChallengeIds:vec principal; participateChallengeIds:vec principal; rewardedChallengeIds:vec principal; createdAt:nat64}; description:text; deadline:nat64; ongoing:bool}) query;
    getChallengesByCreator: () -> (vec record {id:principal; reward:nat64; title:text; creator:principal; responses:vec record {id:int8; title:text; contents:text; chosen:bool; responderId:principal}; createdAt:nat64; completed:vec record {id:principal; username:text; publishChallengeIds:vec principal; participateChallengeIds:vec principal; rewardedChallengeIds:vec principal; createdAt:nat64}; description:text; deadline:nat64; ongoing:bool}) query;
    getChallengesByDate: (nat64, nat64) -> (vec record {id:principal; reward:nat64; title:text; creator:principal; responses:vec record {id:int8; title:text; contents:text; chosen:bool; responderId:principal}; createdAt:nat64; completed:vec record {id:principal; username:text; publishChallengeIds:vec principal; participateChallengeIds:vec principal; rewardedChallengeIds:vec principal; createdAt:nat64}; description:text; deadline:nat64; ongoing:bool}) query;
    getChallengesByParticipant: () -> (vec record {id:principal; reward:nat64; title:text; creator:principal; responses:vec record {id:int8; title:text; contents:text; chosen:bool; responderId:principal}; createdAt:nat64; completed:vec record {id:principal; username:text; publishChallengeIds:vec principal; participateChallengeIds:vec principal; rewardedChallengeIds:vec principal; createdAt:nat64}; description:text; deadline:nat64; ongoing:bool}) query;
    getChallengesByParticipants: (nat64, nat64) -> (vec record {id:principal; reward:nat64; title:text; creator:principal; responses:vec record {id:int8; title:text; contents:text; chosen:bool; responderId:principal}; createdAt:nat64; completed:vec record {id:principal; username:text; publishChallengeIds:vec principal; participateChallengeIds:vec principal; rewardedChallengeIds:vec principal; createdAt:nat64}; description:text; deadline:nat64; ongoing:bool}) query;
    getChallengesByReward: (nat64, nat64) -> (vec record {id:principal; reward:nat64; title:text; creator:principal; responses:vec record {id:int8; title:text; contents:text; chosen:bool; responderId:principal}; createdAt:nat64; completed:vec record {id:principal; username:text; publishChallengeIds:vec principal; participateChallengeIds:vec principal; rewardedChallengeIds:vec principal; createdAt:nat64}; description:text; deadline:nat64; ongoing:bool}) query;
    joinChallenge: (text, text, principal) -> (variant {Ok:bool; Err:variant {InsufficientToken:principal; UserNotCreator:principal; UserAlreadyExist:principal; ChallengeNotFinished:principal; AlreadyParticipated:principal; CreatorNotEnoughBalance:principal; ChallengeFinished:principal; ResponseDoesNotExist:int8; UserNotParticipant:principal; InvalidUser:principal; UserDoesNotExist:principal; ChallengeDoesNotExist:principal; ConnectionError:principal}});
    readUserById: (principal) -> (opt record {id:principal; username:text; publishChallengeIds:vec principal; participateChallengeIds:vec principal; rewardedChallengeIds:vec principal; createdAt:nat64}) query;
    readUsers: () -> (vec record {id:principal; username:text; publishChallengeIds:vec principal; participateChallengeIds:vec principal; rewardedChallengeIds:vec principal; createdAt:nat64}) query;
    rewardParticipant: (principal, int8) -> (variant {Ok:bool; Err:variant {InsufficientToken:principal; UserNotCreator:principal; UserAlreadyExist:principal; ChallengeNotFinished:principal; AlreadyParticipated:principal; CreatorNotEnoughBalance:principal; ChallengeFinished:principal; ResponseDoesNotExist:int8; UserNotParticipant:principal; InvalidUser:principal; UserDoesNotExist:principal; ChallengeDoesNotExist:principal; ConnectionError:principal}});
}
