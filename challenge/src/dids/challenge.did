service: () -> {
    createChallenge: (text, text, nat64, int) -> (variant {Ok:principal; Err:variant {InsufficientToken:principal; UserNotCreator:principal; UserAlreadyExist:principal; ChallengeNotFinished:principal; AlreadyParticipated:principal; CreatorNotEnoughBalance:principal; ChallengeFinished:principal; ResponseDoesNotExist:int8; UserNotParticipant:principal; InvalidUser:principal; UserDoesNotExist:principal; ChallengeDoesNotExist:principal}});
    createUser: (text) -> (variant {Ok:principal; Err:variant {InsufficientToken:principal; UserNotCreator:principal; UserAlreadyExist:principal; ChallengeNotFinished:principal; AlreadyParticipated:principal; CreatorNotEnoughBalance:principal; ChallengeFinished:principal; ResponseDoesNotExist:int8; UserNotParticipant:principal; InvalidUser:principal; UserDoesNotExist:principal; ChallengeDoesNotExist:principal}});
    deleteUser: (principal) -> (variant {Ok:record {id:principal; username:text; rewardedChallengeIds:vec principal; createdAt:nat64; publishingChallengeIds:vec principal; participatingChallengeIds:vec principal}; Err:variant {InsufficientToken:principal; UserNotCreator:principal; UserAlreadyExist:principal; ChallengeNotFinished:principal; AlreadyParticipated:principal; CreatorNotEnoughBalance:principal; ChallengeFinished:principal; ResponseDoesNotExist:int8; UserNotParticipant:principal; InvalidUser:principal; UserDoesNotExist:principal; ChallengeDoesNotExist:principal}});
    expireChallenge: (principal) -> (variant {Ok:bool; Err:variant {InsufficientToken:principal; UserNotCreator:principal; UserAlreadyExist:principal; ChallengeNotFinished:principal; AlreadyParticipated:principal; CreatorNotEnoughBalance:principal; ChallengeFinished:principal; ResponseDoesNotExist:int8; UserNotParticipant:principal; InvalidUser:principal; UserDoesNotExist:principal; ChallengeDoesNotExist:principal}});
    joinChallenge: (text, text, principal) -> (variant {Ok:bool; Err:variant {InsufficientToken:principal; UserNotCreator:principal; UserAlreadyExist:principal; ChallengeNotFinished:principal; AlreadyParticipated:principal; CreatorNotEnoughBalance:principal; ChallengeFinished:principal; ResponseDoesNotExist:int8; UserNotParticipant:principal; InvalidUser:principal; UserDoesNotExist:principal; ChallengeDoesNotExist:principal}});
    readUserById: (principal) -> (opt record {id:principal; username:text; rewardedChallengeIds:vec principal; createdAt:nat64; publishingChallengeIds:vec principal; participatingChallengeIds:vec principal}) query;
    readUsers: () -> (vec record {id:principal; username:text; rewardedChallengeIds:vec principal; createdAt:nat64; publishingChallengeIds:vec principal; participatingChallengeIds:vec principal}) query;
    rewardParticipant: (principal, int8) -> (variant {Ok:bool; Err:variant {InsufficientToken:principal; UserNotCreator:principal; UserAlreadyExist:principal; ChallengeNotFinished:principal; AlreadyParticipated:principal; CreatorNotEnoughBalance:principal; ChallengeFinished:principal; ResponseDoesNotExist:int8; UserNotParticipant:principal; InvalidUser:principal; UserDoesNotExist:principal; ChallengeDoesNotExist:principal}});
}
